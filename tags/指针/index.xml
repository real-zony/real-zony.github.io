<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>指针 on Zony 的博客</title>
        <link>https://real-zony.github.io/tags/%E6%8C%87%E9%92%88/</link>
        <description>Recent content in 指针 on Zony 的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 05 Dec 2015 03:08:00 +0000</lastBuildDate><atom:link href="https://real-zony.github.io/tags/%E6%8C%87%E9%92%88/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>关于函数返回局部指针变量的思考</title>
        <link>https://real-zony.github.io/p/thoughts-on-function-returning-local-pointer-variables/</link>
        <pubDate>Sat, 05 Dec 2015 03:08:00 +0000</pubDate>
        
        <guid>https://real-zony.github.io/p/thoughts-on-function-returning-local-pointer-variables/</guid>
        <description>&lt;p&gt;早先在博客文章 《在Linux下获得程序运行的绝对路径》 当中写到的获取当前运行路径的程序，在编译的时候会提示:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;warning : address of local variable ‘current_path’ returned [-Wreturn-local-addr]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大概意思就是说current_path是局部指针，如果返回的话，因为函数结束后会释放掉指针指向的地址空间，所以提示这个警告。
举个例子:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;buff&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;fuckyou&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;最后调用这个函数并不会返回我们指定的字符串，但是在我们获得路径的程序里面却能够正常返回，这是为什么呢？
回想之前文章里面为保存路径所分配的数组大小是 1024，缩小成 50 也是会得到如上错误。
其实这个写法本身就是错误的，因为我们的程序只是恰好在访问到未被覆盖的内存地址而已。
引用 CSDN C 语言版主 &lt;a class=&#34;link&#34; href=&#34;http://my.csdn.net/paschen&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;paschen&lt;/a&gt; 的 &lt;a class=&#34;link&#34; href=&#34;http://bbs.csdn.net/topics/391871968&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;说法&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是一种不确定行为，你输出的值和函数中的一样只能说明他该值还未被其他值覆盖，如果你调用其他函数等，之前指针所指的内存可能就被其他数据覆盖了，所以不要返回局部变量的指针&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以请严格按照 C++ Primer 4th 的 p214~p215 的说法，千万不要返回局部对象的引用或者局部对象的指针，因为一旦函数执行完毕之后会销毁掉！&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
