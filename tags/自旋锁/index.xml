<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>自旋锁 on Zony 的博客</title>
        <link>https://real-zony.github.io/tags/%E8%87%AA%E6%97%8B%E9%94%81/</link>
        <description>Recent content in 自旋锁 on Zony 的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Wed, 17 Aug 2016 10:06:00 +0000</lastBuildDate><atom:link href="https://real-zony.github.io/tags/%E8%87%AA%E6%97%8B%E9%94%81/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>互斥锁与自旋锁</title>
        <link>https://real-zony.github.io/p/mutex-and-spin-lock/</link>
        <pubDate>Wed, 17 Aug 2016 10:06:00 +0000</pubDate>
        
        <guid>https://real-zony.github.io/p/mutex-and-spin-lock/</guid>
        <description>&lt;h3 id=&#34;锁原理&#34;&gt;锁原理&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;互斥锁&lt;/strong&gt;：线程会从sleep（加锁）——&amp;gt;running（解锁），过程中有上下文的切换，cpu的抢占，信号的发送等开销。
&lt;strong&gt;自旋锁&lt;/strong&gt;：线程一直是running(加锁——&amp;gt;解锁)，死循环检测锁的标志位，机制不复杂。&lt;/p&gt;
&lt;h3 id=&#34;锁区别&#34;&gt;锁区别&lt;/h3&gt;
&lt;p&gt;互斥锁的起始原始开销要高于自旋锁，但是基本是一劳永逸，临界区持锁时间的大小并不会对互斥锁的开销造成影响，而自旋锁是死循环检测，加锁全程消耗cpu，起始开销虽然低于互斥锁，但是随着持锁时间，加锁的开销是线性增长。&lt;/p&gt;
&lt;h3 id=&#34;锁应用&#34;&gt;锁应用&lt;/h3&gt;
&lt;p&gt;互斥锁用于临界区持锁时间比较长的操作，比如下面这些情况都可以考虑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;临界区有IO操作&lt;/li&gt;
&lt;li&gt;临界区代码复杂或者循环量大&lt;/li&gt;
&lt;li&gt;临界区竞争非常激烈&lt;/li&gt;
&lt;li&gt;单核处理器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至于自旋锁就主要用在临界区持锁时间非常短且CPU资源不紧张的情况下。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
