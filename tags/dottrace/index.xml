<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>DotTrace on Zony 的博客</title>
        <link>https://real-zony.github.io/tags/dottrace/</link>
        <description>Recent content in DotTrace on Zony 的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 29 Sep 2018 08:29:56 +0000</lastBuildDate><atom:link href="https://real-zony.github.io/tags/dottrace/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>使用 dotTrace 分析 .NET Core 代码问题</title>
        <link>https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/</link>
        <pubDate>Sat, 29 Sep 2018 08:29:56 +0000</pubDate>
        
        <guid>https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/</guid>
        <description>&lt;h2 id=&#34;0背景&#34;&gt;0.背景&lt;/h2&gt;
&lt;p&gt;在项目开发之中，前期可能主要以保证任务完成为主，对于性能优化主要在于开发完成之后再来进行。可能在测试的时候发现部分接口的代码执行时间过长，但是又毫无头绪，这个时候你就需要性能分析工具来协助你排查问题了。&lt;/p&gt;
&lt;p&gt;常规性能分析借助于 Visual Studio 强大的性能测试工具就可以进行分析，但是这些功能只包含在企业版当中。这个时候我们就可以使用 JetBrains 的 .NET 分析全家桶来进行这个操作了，其包含内存分析(dotMemory)与性能分析(dotTrace)，其实他的 dotCover(单元测试) 也是挺好用的。&lt;/p&gt;
&lt;h2 id=&#34;1安装与下载&#34;&gt;1.安装与下载&lt;/h2&gt;
&lt;h3 id=&#34;11-下载&#34;&gt;1.1 下载&lt;/h3&gt;
&lt;p&gt;安装步骤较为简单，前往 Jetbrains 官网，找到 dotTrace ，点击下载即可。&lt;/p&gt;
&lt;p&gt;其地址为 &lt;a class=&#34;link&#34; href=&#34;https://www.jetbrains.com/profiler/download/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.jetbrains.com/profiler/download/&lt;/a&gt; ，选择自己需要的安装包形式，一般选择 WebInstaller 进行安装，当然这里推荐选择 Standalone (独立版)，直接下载运行就 OK 。&lt;/p&gt;
&lt;h3 id=&#34;12-安装&#34;&gt;1.2 安装&lt;/h3&gt;
&lt;p&gt;每个用户可以免费评估使用 10 天，当然你要使用某些补丁或者激活工具也是可以的，这里不再详述过程，只是注意一下（WebInstaller）在安装的时候选择自己需要的安装就可以了，不需要的直接选为 Skip 跳过。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538107915198.png&#34;
	width=&#34;625&#34;
	height=&#34;600&#34;
	srcset=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538107915198_hu2b7acfc862efae358bb3fc3e358fd6c4_69215_480x0_resize_box_3.png 480w, https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538107915198_hu2b7acfc862efae358bb3fc3e358fd6c4_69215_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1538107915198&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;104&#34;
		data-flex-basis=&#34;250px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;你也可以在安装的时候选择 &amp;ldquo;Visual Studio Integration&amp;rdquo;，这样就会与 VS 集成，在分析代码的时候可以快速跳转到相应的代码行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538104322568.png&#34;
	width=&#34;571&#34;
	height=&#34;368&#34;
	srcset=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538104322568_hu2d30bf63662b6008cc43643c8ab56c42_36315_480x0_resize_box_3.png 480w, https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538104322568_hu2d30bf63662b6008cc43643c8ab56c42_36315_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1538104322568&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;372px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;2使用与分析&#34;&gt;2.使用与分析&lt;/h2&gt;
&lt;p&gt;dotTrace 使用比较方便，本身支持 .NET Core 分析，分析时只是会有四种不同的分析模式，这里大概讲解一下各种分析模式的区别。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538108158793.png&#34;
	width=&#34;1070&#34;
	height=&#34;768&#34;
	srcset=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538108158793_hu07010be786d00a4847439d939dbadf67_108468_480x0_resize_box_3.png 480w, https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538108158793_hu07010be786d00a4847439d939dbadf67_108468_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1538108158793&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;139&#34;
		data-flex-basis=&#34;334px&#34;
	
&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Profiler Options&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;作用与描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sampling&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;通过获取 CLR 内部一个方法开始执行和结束执行的时间差来计算的分析时间。 这是最快的方法，它用于精确测量程序运行时间，但可能会丢失一些数据。 使用此配置类型可使你快速获取应用程序的的总体性能。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Tracing&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;慢于 Sampling 的方法，但是可以准确地测量特定方法被调用的准确次数。 它是通过获取 CLR 内部一个方法开始执行和结束执行的时间差来计算的分 析时间。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Line-by-line&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;通过收集代码执行的每条语句的时间来进行比较，它计算出的时间更加精确。 该方法适用于你已经知道性能问题大概在哪里出现，并要找到具体某一个出 现性能问题的时候。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Timeline&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;采取抽样的方式，每隔一段时间 (10 ms)，会暂停所有线程，并抓取堆栈里的 信息，然后才计算出代码执行时间差。使用这个方式可能会导致一些执行时间 少于 10 ms 的方法无法被抓取到。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;一般来说我们使用的是 &lt;code&gt;Tracing&lt;/code&gt; 来进行代码的性能分析，因为一般都是需要查看每个方法具体的调用时间。下面我就将以一个接口的实例来作为示范，看如何来排查调用缓慢的问题。&lt;/p&gt;
&lt;h3 id=&#34;21-获取快照信息&#34;&gt;2.1 获取快照信息&lt;/h3&gt;
&lt;p&gt;首先运行 dotTrace 之后，选择 .NET Core Application，之后右侧的 Profiler Options 则选择 Tracing。最后一步则是选择需要进行检测的 dll 文件，这里我选择的是一个基于 Abp 框架开发的 ASP.NET Core 项目。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538112730246.png&#34;
	width=&#34;1070&#34;
	height=&#34;768&#34;
	srcset=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538112730246_hu1c889e3c107d9f99932f5621cc218686_111820_480x0_resize_box_3.png 480w, https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538112730246_hu1c889e3c107d9f99932f5621cc218686_111820_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1538112730246&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;139&#34;
		data-flex-basis=&#34;334px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;当然，你也可以勾选上 Advanced ，配置诸如启动参数之类的东西，之后点击 Run 则开始进行分析了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538113236471.png&#34;
	width=&#34;1015&#34;
	height=&#34;567&#34;
	srcset=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538113236471_hu93aafd39b2b58ed219dbf2128c7f6bb7_333419_480x0_resize_box_3.png 480w, https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538113236471_hu93aafd39b2b58ed219dbf2128c7f6bb7_333419_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1538113236471&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;179&#34;
		data-flex-basis=&#34;429px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这里右下角的 &lt;code&gt;Get Snapshot and Wait&lt;/code&gt; 点击之后呢，就会获取到快照文件了，当然现在先不慌，我们先来测试一下我们要测试的接口。&lt;/p&gt;
&lt;p&gt;比如说我这里有一个 TestMethod 方法，其代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TestApplicationService&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ApplicationService&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IRepository&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SysSystem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_tempRep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TestApplicationService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IRepository&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SysSystem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tempRep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;_tempRep&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tempRep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Task&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TestMethod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;systems&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_tempRep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;system&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;systems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Status&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_tempRep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UpdateAsync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;++)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;systems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SystemCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;现在我们通过 SwaggerUI 调用这个接口，看需要多长时间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538115114617.png&#34;
	width=&#34;852&#34;
	height=&#34;186&#34;
	srcset=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538115114617_hucc0aa5ad7eda85196bc372526ba24440_20744_480x0_resize_box_3.png 480w, https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538115114617_hucc0aa5ad7eda85196bc372526ba24440_20744_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1538115114617&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;458&#34;
		data-flex-basis=&#34;1099px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到平均时常都需要 300ms ，现在我们点击 GetSnapshot and Wait 按钮，会弹出分析窗口，并且我们随时可以通过再次点击 Start 按钮，继续分析。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538115225913.png&#34;
	width=&#34;1866&#34;
	height=&#34;1080&#34;
	srcset=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538115225913_hubcf4e6ffaa842ec8763bcb9e70ced1ee_123503_480x0_resize_box_3.png 480w, https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538115225913_hubcf4e6ffaa842ec8763bcb9e70ced1ee_123503_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1538115225913&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;172&#34;
		data-flex-basis=&#34;414px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;22-分析代码&#34;&gt;2.2 分析代码&lt;/h3&gt;
&lt;h4 id=&#34;221-概览信息&#34;&gt;2.2.1 概览信息&lt;/h4&gt;
&lt;p&gt;Tracing 分析的界面比较简单，一个 All Calls 页签与 Overview (概览) 的页签，首先我们大致看一下概览窗口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538115794174.png&#34;
	width=&#34;1399&#34;
	height=&#34;826&#34;
	srcset=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538115794174_hu2bb4b4c8305cd7dd92ed38d40f46a2b5_129223_480x0_resize_box_3.png 480w, https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538115794174_hu2bb4b4c8305cd7dd92ed38d40f46a2b5_129223_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1538115794174&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;169&#34;
		data-flex-basis=&#34;406px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到他给我们标识了用户代码执行周期最长的一些地方，其次也用柱状图很直观地体现了耗时最长的代码分类。&lt;/p&gt;
&lt;p&gt;右侧则提列了一些快照的信息与运行时的环境信息，以便用户作为参考。&lt;/p&gt;
&lt;h4 id=&#34;222-threads-tree-线程信息&#34;&gt;2.2.2 Threads Tree (线程信息)&lt;/h4&gt;
&lt;p&gt;本窗口主要的作用是分析应用程序里面发生的所有的线程活动，主线程有一个&lt;img src=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538116056600.png&#34;
	width=&#34;15&#34;
	height=&#34;17&#34;
	srcset=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538116056600_hub8d9f6ddb2a65660e2ee75e315659963_334_480x0_resize_box_3.png 480w, https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538116056600_hub8d9f6ddb2a65660e2ee75e315659963_334_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1538116056600&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;88&#34;
		data-flex-basis=&#34;211px&#34;
	
&gt;图标，而终结器线程则是拥有一个&lt;img src=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538116096937.png&#34;
	width=&#34;18&#34;
	height=&#34;19&#34;
	srcset=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538116096937_hud4866382b5fe093db3480bbe2dcf954c_751_480x0_resize_box_3.png 480w, https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538116096937_hud4866382b5fe093db3480bbe2dcf954c_751_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1538116096937&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;94&#34;
		data-flex-basis=&#34;227px&#34;
	
&gt;图标，剩下的都是线程池内部的工作线程。&lt;/p&gt;
&lt;p&gt;在这里我们以主线程为例，分析一下其具体内容所表达的意思。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538116543296.png&#34;
	width=&#34;577&#34;
	height=&#34;49&#34;
	srcset=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538116543296_huc50cef9425cb566c7f890d9b5ffe99ec_6002_480x0_resize_box_3.png 480w, https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538116543296_huc50cef9425cb566c7f890d9b5ffe99ec_6002_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1538116543296&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1177&#34;
		data-flex-basis=&#34;2826px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Main：代表不带命名空间的方法简称。&lt;/li&gt;
&lt;li&gt;99 . 99 %：代表该方法针对于整个线程运行时间所占的百分比，这里的意思就是 Main 方法占用了整个主线程运行时间的 99.99 %。&lt;/li&gt;
&lt;li&gt;523,732 ms：代表该方法与子方法执行的总时间。&lt;/li&gt;
&lt;li&gt;1 call：方法在堆栈上所被调用的次数。&lt;/li&gt;
&lt;li&gt;XXX.Web.Host.Startup.Program.Main(string[] )：被调用方法的全称，&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;223-call-tree-调用树&#34;&gt;2.2.3 Call Tree (调用树)&lt;/h4&gt;
&lt;p&gt;一般我们使用本页面的时候会多一点，这个页面会显示在所有线程中的所有被调用的方法。其每一个根节点代表的是每一个线程所执行的一个根函数，而下面每一个节点则代表其根函数内部调用的子函数的相关性能分析信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538116689852.png&#34;
	width=&#34;1196&#34;
	height=&#34;519&#34;
	srcset=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538116689852_hu16ffda8567c2070260d49492ca17a346_84254_480x0_resize_box_3.png 480w, https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538116689852_hu16ffda8567c2070260d49492ca17a346_84254_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1538116689852&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;230&#34;
		data-flex-basis=&#34;553px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;那么我们如何快速定位我们刚才测试的接口呢？&lt;/p&gt;
&lt;p&gt;按下 Ctrl+F ，会弹出搜索框，在里面输入我们所编写的接口方法名字，按下回车就会快速定位了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538116763977.png&#34;
	width=&#34;677&#34;
	height=&#34;290&#34;
	srcset=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538116763977_hu78bb044b183b2f15283890e98e3cdab4_27184_480x0_resize_box_3.png 480w, https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538116763977_hu78bb044b183b2f15283890e98e3cdab4_27184_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1538116763977&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;233&#34;
		data-flex-basis=&#34;560px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;之后我们会看到如下内容：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538117069160.png&#34;
	width=&#34;1595&#34;
	height=&#34;577&#34;
	srcset=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538117069160_hu10746ab056424da6e7c514b819fe7660_154448_480x0_resize_box_3.png 480w, https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538117069160_hu10746ab056424da6e7c514b819fe7660_154448_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1538117069160&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;276&#34;
		data-flex-basis=&#34;663px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;通过展开节点我们可以知道最耗费时间的方法，即为 GetAll 方法，当点击节点的时候，右侧也会定位到相应的代码位置。&lt;/p&gt;
&lt;p&gt;这里可以看到整个 GetAll 方法使用了 1015ms 的时间，这是为什么呢？你可以看到在其右侧有一个 8 calls ，这个时间是 8 次调用总共所花费的时间。&lt;/p&gt;
&lt;p&gt;右键节点，你可以通过 Properties 可以看到该方法的平均执行时间：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538117214194.png&#34;
	width=&#34;406&#34;
	height=&#34;373&#34;
	srcset=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538117214194_hu06505beb23dfd8e007a167e93ad5ab92_22431_480x0_resize_box_3.png 480w, https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538117214194_hu06505beb23dfd8e007a167e93ad5ab92_22431_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1538117214194&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;108&#34;
		data-flex-basis=&#34;261px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到其自身只花费了 8.3 μs，说明真正执行缓慢的还在其更深层，这里就不再往里面跟了，如果需要更加详细的性能报告，可以不使用 Tracing 模式，而使用 Line-by-line 模式来进行分析。&lt;/p&gt;
&lt;h4 id=&#34;224-plain-list-简单列表&#34;&gt;2.2.4 Plain List (简单列表)&lt;/h4&gt;
&lt;p&gt;以平铺的方式展示所有被调用过的方法列表，让你分析具体代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538117794931.png&#34;
	width=&#34;1343&#34;
	height=&#34;479&#34;
	srcset=&#34;https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538117794931_hu8a1c617e572ea1d53859c02b3b7f4530_88191_480x0_resize_box_3.png 480w, https://real-zony.github.io/p/analyze-net-core-code-issues-with-dottrace/1538117794931_hu8a1c617e572ea1d53859c02b3b7f4530_88191_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1538117794931&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;280&#34;
		data-flex-basis=&#34;672px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;225-hot-spots-热点跟踪&#34;&gt;2.2.5 Hot Spots (热点跟踪)&lt;/h4&gt;
&lt;p&gt;该视图会列举出所有耗时最长的方法。&lt;/p&gt;
&lt;h2 id=&#34;3参考资料&#34;&gt;3.参考资料&lt;/h2&gt;
&lt;p&gt;CSDN：https://blog.csdn.net/weixin_38208401/article/details/75645021&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
