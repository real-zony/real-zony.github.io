<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>内存 on Zony 的博客</title>
        <link>https://real-zony.github.io/tags/%E5%86%85%E5%AD%98/</link>
        <description>Recent content in 内存 on Zony 的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 04 Feb 2016 03:38:00 +0000</lastBuildDate><atom:link href="https://real-zony.github.io/tags/%E5%86%85%E5%AD%98/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>malloc 的原理与产生内存碎片的原因</title>
        <link>https://real-zony.github.io/p/the-principle-of-malloc-and-the-reasons-for-memory-fragmentation/</link>
        <pubDate>Thu, 04 Feb 2016 03:38:00 +0000</pubDate>
        
        <guid>https://real-zony.github.io/p/the-principle-of-malloc-and-the-reasons-for-memory-fragmentation/</guid>
        <description>&lt;h3 id=&#34;什么是缺页中断&#34;&gt;什么是缺页中断?&lt;/h3&gt;
&lt;p&gt;当一个进程发生缺页中断的时候，进程会陷入内核态，执行以下操作:&lt;/p&gt;
&lt;p&gt;1、检查要访问的虚拟地址是否合法。&lt;/p&gt;
&lt;p&gt;2、查找/分配一个物理页。&lt;/p&gt;
&lt;p&gt;3、填充物理页内容（读取磁盘，或者直接置0，或者啥也不干）。&lt;/p&gt;
&lt;p&gt;4、建立映射关系（虚拟地址到物理地址）。&lt;/p&gt;
&lt;p&gt;重新执行发生缺页中断的那条指令&lt;/p&gt;
&lt;p&gt;如果第3步，需要读取磁盘，那么这次缺页中断就是 majflt，否则就是 minflt。&lt;/p&gt;
&lt;h3 id=&#34;内存分配的原理&#34;&gt;内存分配的原理&lt;/h3&gt;
&lt;p&gt;从操作系统角度来看，进程分配内存有两种方式，分别由两个系统调用完成：&lt;em&gt;brk&lt;/em&gt; 和 &lt;em&gt;mmap&lt;/em&gt;（不考虑共享内存）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;brk 是将数据段(.data)的最高地址指针 _edata 往高地址推；&lt;/li&gt;
&lt;li&gt;mmap 是在进程的虚拟地址空间中（堆和栈中间，称为文件映射区域的地方）找一块空闲的虚拟内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两种方式分配的都是虚拟内存，没有分配物理内存。在第一次访问已分配的虚拟地址空间的时候，发生 &lt;strong&gt;缺页中断&lt;/strong&gt;，操作系统负责分配物理内存，然后建立虚拟内存和物理内存之间的映射关系。&lt;/p&gt;
&lt;p&gt;在标准C库中，提供了malloc/free函数分配释放内存，其实这两个函数底层是由 brk、mmap、munmap 这些系统调用实现的。&lt;/p&gt;
&lt;h3 id=&#34;下面以一个例子来说明内存分配的原理&#34;&gt;下面以一个例子来说明内存分配的原理：&lt;/h3&gt;
&lt;p&gt;1.malloc 小于 128k 的内存，使用 brk 分配内存，将 _edata 往高地址推(只分配虚拟空间，不对应物理内存(因此没有初始化)，第一次读/写数据时，引起内核 &lt;strong&gt;缺页中断&lt;/strong&gt;，内核才分配对应的物理内存，然后虚拟地址空间建立映射关系)，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://real-zony.github.io/p/the-principle-of-malloc-and-the-reasons-for-memory-fragmentation/3902389137.png&#34;
	width=&#34;1206&#34;
	height=&#34;540&#34;
	srcset=&#34;https://real-zony.github.io/p/the-principle-of-malloc-and-the-reasons-for-memory-fragmentation/3902389137_hu915885d5869caaf65f34f118b24619fc_25834_480x0_resize_box_3.png 480w, https://real-zony.github.io/p/the-principle-of-malloc-and-the-reasons-for-memory-fragmentation/3902389137_hu915885d5869caaf65f34f118b24619fc_25834_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;bbq.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;223&#34;
		data-flex-basis=&#34;536px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;进程启动的时候，其（虚拟）内存空间的初始布局如图1所示。&lt;/p&gt;
&lt;p&gt;其中，mmap 内存映射文件是在堆和栈的中间（例如libc-2.2.93.so，其它数据文件等），为了简单起见，省略了内存映射文件。&lt;/p&gt;
&lt;p&gt;_edata 指针（glibc 里面定义）指向数据段的最高地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程调用 A=malloc(30K)以后，内存空间如图2：&lt;/p&gt;
&lt;p&gt;malloc 函数会调用 brk 系统调用，将 _edata 指针往高地址推30K，就完成虚拟内存分配。&lt;/p&gt;
&lt;p&gt;你可能会问：只要把 _edata+30K 就完成内存分配了？&lt;/p&gt;
&lt;p&gt;事实是这样的，_edata+30K 只是完成虚拟地址的分配，A这块内存现在还是没有物理页与之对应的，等到进程第一次读写A这块内存的时候，发生缺页中断，这个时候，内核才分配A这块内存对应的物理页。也就是说，如果用malloc分配了A这块内容，然后从来不访问它，那么，A 对应的物理页是不会被分配的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程调用 B=malloc(40K) 以后，内存空间如图3。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.malloc 大于128k的内存，使用 mmap 分配内存，在堆和栈之间找一块空闲内存分配(对应独立内存，而且初始化为0)，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://real-zony.github.io/p/the-principle-of-malloc-and-the-reasons-for-memory-fragmentation/14466247.png&#34;
	width=&#34;1232&#34;
	height=&#34;1132&#34;
	srcset=&#34;https://real-zony.github.io/p/the-principle-of-malloc-and-the-reasons-for-memory-fragmentation/14466247_hub21a3cbafd8c1badc68a6d0aa6d1e10b_51300_480x0_resize_box_3.png 480w, https://real-zony.github.io/p/the-principle-of-malloc-and-the-reasons-for-memory-fragmentation/14466247_hub21a3cbafd8c1badc68a6d0aa6d1e10b_51300_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;bbq.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;108&#34;
		data-flex-basis=&#34;261px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;进程调用 C=malloc(200K) 以后，内存空间如图1：&lt;/p&gt;
&lt;p&gt;默认情况下，malloc 函数分配内存，如果请求内存大于 128K（可由M_MMAP_THRESHOLD选项调节），那就不是去推 _edata 指针了，而是利用 mmap 系统调用，从堆和栈的中间分配一块虚拟内存。&lt;/p&gt;
&lt;p&gt;这样子做主要是因为:&lt;/p&gt;
&lt;p&gt;brk 分配的内存需要等到高地址内存释放以后才能释放（例如，在B释放之前，A是不可能释放的，这就是内存碎片产生的原因，什么时候紧缩看下面），而 mmap 分配的内存可以单独释放。&lt;/p&gt;
&lt;p&gt;当然，还有其它的好处，也有坏处，再具体下去，有兴趣的同学可以去看 glibc 里面 malloc 的代码了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程调用 D=malloc(100K) 以后，内存空间如图2。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程调用 free(C) 以后，C对应的虚拟内存和物理内存一起释放，图3。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程调用 free(B) 以后，如图4所示：&lt;/p&gt;
&lt;p&gt;B对应的虚拟内存和物理内存都没有释放，因为只有一个 _edata 指针，如果往回推，那么 D 这块内存怎么办呢？&lt;/p&gt;
&lt;p&gt;当然，B 这块内存，是可以重用的，如果这个时候再来一个 40K 的请求，那么 malloc 很可能就把B这块内存返回回去了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程调用 free(D) 以后，如图5所示：&lt;/p&gt;
&lt;p&gt;B 和 D 连接起来，变成一块140K的空闲内存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;默认情况下：&lt;/p&gt;
&lt;p&gt;当最高地址空间的空闲内存超过 128K（可由M_TRIM_THRESHOLD选项调节）时，执行内存紧缩操作（trim）。在上一个步骤free的时候，发现最高地址空闲内存超过128K，于是内存紧缩，变成图6所示。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
