<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Docfx on Zony 的博客</title>
        <link>https://real-zony.github.io/tags/docfx/</link>
        <description>Recent content in Docfx on Zony 的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Fri, 04 May 2018 12:38:00 +0000</lastBuildDate><atom:link href="https://real-zony.github.io/tags/docfx/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>在 Docker 当中搭建 Docfx 站点</title>
        <link>https://real-zony.github.io/p/building-a-docfx-site-in-docker/</link>
        <pubDate>Fri, 04 May 2018 12:38:00 +0000</pubDate>
        
        <guid>https://real-zony.github.io/p/building-a-docfx-site-in-docker/</guid>
        <description>&lt;h2 id=&#34;一简介&#34;&gt;一、简介&lt;/h2&gt;
&lt;p&gt;Docfx 是微软开发的一款开源的文档生成工具，其默认支持 C# 与 VB.Net 这两种项目的文档生成，支持 DotNetCore 项目，并且还可以打包成一个静态的 Web 站点，而且还支持 markdown 文件。
**&lt;a class=&#34;link&#34; href=&#34;https://sixlabors.github.io/docs/api/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;这个站点&lt;/a&gt;**就是 ImageSharp 的 API 文档，可以去参考一下。
&lt;img src=&#34;https://real-zony.github.io/p/building-a-docfx-site-in-docker/5b2eb439bd600.png&#34;
	width=&#34;1293&#34;
	height=&#34;581&#34;
	srcset=&#34;https://real-zony.github.io/p/building-a-docfx-site-in-docker/5b2eb439bd600_huc63b483c560470f5c1e13aa6b5126cff_58285_480x0_resize_box_3.png 480w, https://real-zony.github.io/p/building-a-docfx-site-in-docker/5b2eb439bd600_huc63b483c560470f5c1e13aa6b5126cff_58285_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;222&#34;
		data-flex-basis=&#34;534px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;二安装&#34;&gt;二、安装&lt;/h2&gt;
&lt;h3 id=&#34;下载&#34;&gt;下载&lt;/h3&gt;
&lt;p&gt;Docfx 是即开即用的，他基于 .Net Framework 开发，所以我们可以先在 Windows 平台上面生成 API 文档试一下，DocFx 的下载地址为 &lt;a class=&#34;link&#34; href=&#34;https://github.com/dotnet/docfx/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/dotnet/docfx/releases &lt;/a&gt;，选择最新版本下载即可。&lt;/p&gt;
&lt;h3 id=&#34;设置环境变量&#34;&gt;设置环境变量&lt;/h3&gt;
&lt;p&gt;然后解压其压缩包，因为这是一个命令行程序，所以我们可以将其目录添加到环境变量以便于我们在任何地方来使用。
按住 Shift 键再点击右键在当前目录弹出 cmd 命令行窗口，输入一下命令:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;setx PATH &lt;span class=&#34;s2&#34;&gt;&amp;#34;%Path%;&amp;lt; 这里是你 docfx.exe 所在的目录&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;三使用&#34;&gt;三、使用&lt;/h2&gt;
&lt;h3 id=&#34;初始化基础项目&#34;&gt;初始化基础项目&lt;/h3&gt;
&lt;p&gt;在你需要生成基础项目的文件夹下打开命令行窗口，运行 &lt;code&gt;docfx init -q&lt;/code&gt; 就回在当前目录下生成一个 docfx_project 文件夹，这里面包含了一些基本配置，稍后再讲。&lt;/p&gt;
&lt;h3 id=&#34;生成-api-yml-文件&#34;&gt;生成 API yml 文件&lt;/h3&gt;
&lt;p&gt;docfx 支持为 csproj 与 sln 来生成 API 文档，假如你的库有很多个的话，就可以直接根据 sln 解决方案来生成 API 文档。
我们来到 API 目录下面，在 csproj 文件所在目录打开命令行窗口，运行 &lt;code&gt;docfx metadata ./api.csproj&lt;/code&gt; 命令就会在这个目录下面生成一个 &lt;strong&gt;_api&lt;/strong&gt; 文件夹，这里面会包含大量像这样的 yml 文件。
&lt;img src=&#34;https://real-zony.github.io/p/building-a-docfx-site-in-docker/5b2eb46216764.png&#34;
	width=&#34;634&#34;
	height=&#34;472&#34;
	srcset=&#34;https://real-zony.github.io/p/building-a-docfx-site-in-docker/5b2eb46216764_hu59309148f91045e3f4ae0461ce6da1fc_57197_480x0_resize_box_3.png 480w, https://real-zony.github.io/p/building-a-docfx-site-in-docker/5b2eb46216764_hu59309148f91045e3f4ae0461ce6da1fc_57197_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;134&#34;
		data-flex-basis=&#34;322px&#34;
	
&gt;
将这些文件拷贝到 docfx_project 目录下的 api 文件夹内，编辑 docfx_project 根目录的 toc.yml 文件，如下：
&lt;img src=&#34;https://real-zony.github.io/p/building-a-docfx-site-in-docker/5b2eb4a037ce9.png&#34;
	width=&#34;366&#34;
	height=&#34;157&#34;
	srcset=&#34;https://real-zony.github.io/p/building-a-docfx-site-in-docker/5b2eb4a037ce9_hu68fd42a10202a84229ee5a603c9cdf43_4546_480x0_resize_box_3.png 480w, https://real-zony.github.io/p/building-a-docfx-site-in-docker/5b2eb4a037ce9_hu68fd42a10202a84229ee5a603c9cdf43_4546_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;233&#34;
		data-flex-basis=&#34;559px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这里面就是管理 API 站点目录结构的，可以看到这里的每一个以 &lt;code&gt;- &lt;/code&gt;划分的都是一个节点，也就是在 API 站点顶部导航栏所展示的内容，而 &lt;code&gt;href&lt;/code&gt; 则是该导航栏指向的文档目录路径。&lt;code&gt;homepage&lt;/code&gt; 则是首页的 markdown 文件。
如果你有一些自定义的文档则可以在这里添加目录结构。&lt;/p&gt;
&lt;h3 id=&#34;构建-api-站点&#34;&gt;构建 API 站点&lt;/h3&gt;
&lt;p&gt;文件这些已经准备就绪，原始的站点文档都以 yml 文件与 md 文件为主，我们可以通过调用 &lt;code&gt;docfx ./docfx.json &lt;/code&gt;命令来将这些文件构建成一个静态的 html 站点。
&lt;img src=&#34;https://real-zony.github.io/p/building-a-docfx-site-in-docker/5b2eb4a04ff62.png&#34;
	width=&#34;993&#34;
	height=&#34;519&#34;
	srcset=&#34;https://real-zony.github.io/p/building-a-docfx-site-in-docker/5b2eb4a04ff62_hue57e33cc05143288dd5cbc02c65c3c93_15237_480x0_resize_box_3.png 480w, https://real-zony.github.io/p/building-a-docfx-site-in-docker/5b2eb4a04ff62_hue57e33cc05143288dd5cbc02c65c3c93_15237_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;191&#34;
		data-flex-basis=&#34;459px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;预览-api-站点&#34;&gt;预览 API 站点&lt;/h3&gt;
&lt;p&gt;如果我们想查看效果的话，可以在 docfx_project 目录执行 &lt;code&gt;docfx serve ./_site&lt;/code&gt; 命令，它将会开启一个服务器，你也可以通过 &lt;code&gt;-p&lt;/code&gt; 参数来指定自己的端口，例如 &lt;code&gt;docfx serve ./_site -p 5000&lt;/code&gt;。
&lt;img src=&#34;https://real-zony.github.io/p/building-a-docfx-site-in-docker/5b2eb4a0d154d.png&#34;
	width=&#34;1686&#34;
	height=&#34;957&#34;
	srcset=&#34;https://real-zony.github.io/p/building-a-docfx-site-in-docker/5b2eb4a0d154d_hu15fb5799f16c02e07866cae3626cb5e6_94301_480x0_resize_box_3.png 480w, https://real-zony.github.io/p/building-a-docfx-site-in-docker/5b2eb4a0d154d_hu15fb5799f16c02e07866cae3626cb5e6_94301_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;422px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;四部署&#34;&gt;四、部署&lt;/h2&gt;
&lt;p&gt;如果只是自己看就没什么用了，那么我们还可以通过 Docker 来将我们的站点部署到服务器上，如何来做呢？大致思路就是一个 docker 镜像生成 &lt;code&gt;_site&lt;/code&gt; 文件夹，一个镜像来做 Web 服务器承载站点。&lt;/p&gt;
&lt;h3 id=&#34;制作镜像&#34;&gt;制作镜像&lt;/h3&gt;
&lt;h4 id=&#34;1文档生成镜像-doc_generator&#34;&gt;1.文档生成镜像 doc_generator&lt;/h4&gt;
&lt;p&gt;那么我们首先来编写生成 docker 镜像的 Dockerfile 文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; mono:latest&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WORKDIR&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; /work&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; ./ .&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 构建 API 站点&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; mono /work/docfx/docfx.exe /work/docfx.json &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mkdir /app&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENTRYPOINT&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-r&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/work/_site/*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/app&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;运行 &lt;code&gt;docker build -t doc_generator .&lt;/code&gt; 命令生成了一个 doc_generator 镜像。&lt;/p&gt;
&lt;h4 id=&#34;2web-服务器镜像-nginx&#34;&gt;2.Web 服务器镜像 nginx&lt;/h4&gt;
&lt;p&gt;这里 Web 服务器镜像并不需要特别的定制，直接使用 nginx 的默认镜像就可以了。&lt;/p&gt;
&lt;h3 id=&#34;运行镜像&#34;&gt;运行镜像&lt;/h3&gt;
&lt;p&gt;那么我们来编写一个 Shell 运行我们的镜像:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;docker run -dti -v /temp/document_html:/app --name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;doc_generator doc_generator
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 移动文件，更改文件目录结构&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cp -r /temp/document_html/_site/* /temp/document_html
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run --name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;doc_nginx -d -p 20001:80 -v /temp/document_html:/usr/share/nginx/html nginx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;执行脚本之后查看效果：
&lt;img src=&#34;https://real-zony.github.io/p/building-a-docfx-site-in-docker/5b2eb4a0a7fb9.png&#34;
	width=&#34;1212&#34;
	height=&#34;402&#34;
	srcset=&#34;https://real-zony.github.io/p/building-a-docfx-site-in-docker/5b2eb4a0a7fb9_hu1145ffe4040451db2cd5075648d41d3d_18500_480x0_resize_box_3.png 480w, https://real-zony.github.io/p/building-a-docfx-site-in-docker/5b2eb4a0a7fb9_hu1145ffe4040451db2cd5075648d41d3d_18500_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;img&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;301&#34;
		data-flex-basis=&#34;723px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;五后记&#34;&gt;五、后记&lt;/h2&gt;
&lt;p&gt;结合 Jenkins 等 CI 你可以实现自动增量更新，这里就不再赘述了。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
