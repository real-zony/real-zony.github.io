<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>HashTable on Zony 的博客</title>
        <link>https://real-zony.github.io/tags/hashtable/</link>
        <description>Recent content in HashTable on Zony 的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 19 Jul 2016 10:04:00 +0000</lastBuildDate><atom:link href="https://real-zony.github.io/tags/hashtable/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>C# HashTable与HashMap的区别</title>
        <link>https://real-zony.github.io/p/difference-between-csharp-hashtable-and-hashmap/</link>
        <pubDate>Tue, 19 Jul 2016 10:04:00 +0000</pubDate>
        
        <guid>https://real-zony.github.io/p/difference-between-csharp-hashtable-and-hashmap/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;HashTable的方法是同步的，HashMap的方法是未同步的，所以在多线程场合需要手动同步。&lt;/li&gt;
&lt;li&gt;HashTable不允许null值，而HashMap则是允许null值存在的。&lt;/li&gt;
&lt;li&gt;HashTable有一个contains(Object value)，功能和containsValue(Object value)功能一样。&lt;/li&gt;
&lt;li&gt;HashTable使用Enumeration，HashMap使用Iterator。 以上只是表面的不同，它们的实现也有很大的不同。&lt;/li&gt;
&lt;li&gt;HashTable中hash数组默认大小是11，增加的方式是 old*2+1。HashMap中hash数组的默认大小是16，而且一定是2的指数。&lt;/li&gt;
&lt;li&gt;哈希值的使用不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简要区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hashtable是Dictionary的子类，HashMap是Map接口的一个实现类。&lt;/li&gt;
&lt;li&gt;Hashtable中的方法是同步的，而HashMap中的方法在缺省情况下是非同步的。即是说，在多线程应用程序中，不用专门的操作就安全地可以使用Hashtable了；而对于HashMap，则需要额外的同步机制。但HashMap的同步问题可通过Collections的一个静态方法得到解决：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Collections&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;synchronizedMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个方法返回一个同步的Map，这个Map封装了底层的HashMap的所有方法，使得底层的HashMap即使是在多线程的环境中也是安全的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在HashMap中，null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。当get()方法返回null值时，即可以表示HashMap中没有该键，也可以表示该键所对应的值为null。因此，在HashMap中不能由get()方法来判断HashMap中是否存在某个键，而应该用containsKey()方法来判断。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
